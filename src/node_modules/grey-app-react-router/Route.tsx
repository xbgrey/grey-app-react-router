import * as React from 'react';
import history, { CutoverEvent } from './history';

export class RouteProps {
    path: string | RegExp;
    exact?: boolean;
    component?: React.ComponentType<ComponentProps>;
    render?: (props: ComponentProps) => React.ReactNode;
}

export class ComponentProps {
    location: Location
}

export interface Location<S=any> {

    /** 路由状态 */
    state: S;

    /** 路由参数 */
    search: string;

    /** 当前路由 */
    pathname: string;
}

export class RouteState {
    /** 当前的路由 */
    pathname: string;

    /** 路由状态 */
    state: string;

    /** 路由参数 */
    search: string;
}

export default class Route extends React.PureComponent<RouteProps, RouteState>{

    state = new RouteState()

    componentDidMount() {
        history.on(CutoverEvent.TYPE, this.onCutoverHandler)
    }

    componentWillUnmount() {
        history.off(CutoverEvent.TYPE, this.onCutoverHandler)
    }

    render() {
        if (this.isShow === false) {
            return null;
        }

        const location = {
            state: this.state.state,
            pathname: this.state.pathname,
            search: this.state.search,
        }

        if (this.props.component) {
            return (
                <this.props.component
                    location={location}
                >
                    {this.props.children}
                </this.props.component >
            )
        }

        if (this.props.render) {
            return this.props.render({ location });
        }

        return this.props.children;
    }

    /** 判断是否可以显示 */
    private get isShow(): boolean {

        const pathname = this.state.pathname;
        
        if (!pathname) {
            return false;
        }

        if (this.props.exact) {
            return this.props.path === pathname;
        } else {
            const pathnameArr = pathname.match(this.props.path) || [];
            return pathnameArr.length > 0;
        }
    }

    /** 路由切换时候 */
    private onCutoverHandler = (e: CutoverEvent) => {
        this.setState({ pathname: e.pathname, state: e.state, search: e.search });
    }
}
