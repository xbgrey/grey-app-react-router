import createHistory from 'history/createBrowserHistory';
import { Message, Event } from 'grey-message';
import { History, BrowserHistoryBuildOptions, Location, Action, UnregisterCallback } from 'history';

export class CutoverEvent extends Event {

    public static TYPE: string = Message.createType('Cutover');

    public location: Location;

    public action: Action;

    constructor(location: Location, action: Action) {
        super(CutoverEvent.TYPE)
        this.location = location;
        this.action = action;
    }
}

class Router extends Message {

    private static _instance: Router;

    private _history: History;

    /** 关闭监听路由方法 */
    private unlisten: UnregisterCallback;

    public static get instance(): Router {
        if (!Router._instance) {
            Router._instance = new Router();
        }
        return Router._instance;
    }

    public createHistory = (options?: BrowserHistoryBuildOptions | undefined): History => {
        if (this.unlisten) {
            this.unlisten();
        }
        this._history = createHistory(options);
        this.unlisten = this._history.listen(this.onHistoryListenHandler);
        return this._history;
    }

    public set history(value: History) {
        if (this.unlisten) {
            this.unlisten();
        }
        this._history = value;
        this.unlisten = this._history.listen(this.onHistoryListenHandler);
    }

    public get history(): History {
        if (!this._history) {
            this.createHistory();
        }
        return this._history;
    }

    /** 路由改变 */
    private onHistoryListenHandler = (location: Location, action: Action) => {
        this.send(new CutoverEvent(location, action));
    }
}

export default Router.instance;