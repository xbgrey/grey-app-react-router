import { Message, Event } from 'grey-message';

/**
 * 聚合方法
 * @param value 处理的原始数据 
 * @param fns 处理数据的方法集合
 */
function group<V>(value: V, ...fns: Array<(value: V) => V>): V {
    for (const i in fns) {
        if (i) {
            value = fns[i](value)
        }
    }
    return value;
}

class History extends Message {

    private static _instance: History;

    /** 历史记录的多大条数 */
    public max: number = 50;

    /** 路由历史空降 */
    public memory: CutoverEvent[] = [];

    constructor() {
        super();
    }

    public static get instance(): History {
        if (!History._instance) {
            History._instance = new History();
        }
        return History._instance;
    }

    /**
     * 跳转到制定地址
     * @param path 地址
     * @param state 状态
     */
    public push(path: string, state?: any) {
        group(
            this.cutoverEvent(path, state),
            this.memoryCutover,
            this.sendEvent,
            this.replaceState,
        )
    }

    /** 创建切换路由的消息对象 */
    private cutoverEvent = (path: string, state: any) => {
        const pathArr = path.split('?');
        return new CutoverEvent(pathArr[0], pathArr[1] && `?${pathArr[1]}`, state)
    }

    /** 发送状态切换消息 */
    private sendEvent = (cutoverEvent: CutoverEvent) => {
        this.send(cutoverEvent)
        return cutoverEvent;
    }

    /** 修改浏览器地址栏显示 */
    private replaceState = (cutoverEvent: CutoverEvent) => {
        history.replaceState(cutoverEvent.state, null as any, cutoverEvent.pathname + cutoverEvent.search);
        return cutoverEvent;
    }

    /** 保持历史记录 */
    private memoryCutover = (cutoverEvent: CutoverEvent) => {
        if (this.memory.length >= this.max) {
            this.memory.unshift();
        }
        this.memory.push(cutoverEvent);
        return cutoverEvent;
    }
}

/** 切换路由事件 */
export class CutoverEvent extends Event {

    public static TYPE: string = Message.createType('CutoverEvent');

    /** 当前路由 */
    public pathname: string;

    /** 当前状态 */
    public state: any;

    /** 路由参数 */
    public search?: string;

    constructor(pathname: string, search?: string, state?: any) {
        super(CutoverEvent.TYPE);
        this.pathname = pathname;
        this.state = state;
        this.search = search;
    }
}

export default History.instance;