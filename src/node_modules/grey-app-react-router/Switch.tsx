import * as React from 'react';
import history, { CutoverEvent } from './history';

export class SwitchState {

    /** 当前的路由 */
    public pathname: string = window.location.pathname;

    /** 路由状态 */
    public state: any = null;

    /** 路由参数 */
    public search: string = window.location.search;
}

export default class Switch extends React.PureComponent<any, SwitchState> {

    constructor(props: any) {
        super(props)
        this.state = new SwitchState();
        history.on(CutoverEvent.TYPE, this.onCutoverHandler);
    }

    public componentDidMount() {
        history.on(CutoverEvent.TYPE, this.onCutoverHandler);
    }

    public componentWillUnmount() {
        history.off(CutoverEvent.TYPE, this.onCutoverHandler);
    }

    public render() {
        const list: any[] = Array.isArray(this.props.children) ? this.props.children : [this.props.children]
        for (const i in list) {
            if (this.isShow(list[i].props.path, list[i].props.exact)) {
                return React.cloneElement(list[i], {
                    location: {
                        state: this.state.state,
                        search: this.state.search,
                        pathname: this.state.pathname,
                    }
                });
            }
        }
        return '';
    }

    /** 判断是否可以显示 */
    private isShow = (path: string, exact: boolean): boolean => {

        // 无路径参数 直接展示
        if (!path) {
            return true;
        }

        const pathname = this.state.pathname;
        if (!pathname) {
            return false;
        }

        // 是否严格匹配
        if (exact) {
            return path === pathname;
        } else {
            const pathnameArr = pathname.match(path) || [];
            return pathnameArr.length > 0;
        }
    }

    /** 路由切换时候 */
    private onCutoverHandler = (e: CutoverEvent) => {
        this.setState({ pathname: e.pathname, state: e.state, search: e.search });
    }
}